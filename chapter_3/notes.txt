# =================================================================
¬øQue son las higher-order functions?

Las higher-order functions son funciones que cumplen una de estas condiciones:

    ‚ú® Toman una o m√°s funciones como argumentos: Puedes pasar una funci√≥n comoo par√°metro a otra funcion.
    ‚ö° Devuelven una funci√≥n como resultado: La funci√≥n genera otra funci√≥n al ejecutarse.

Ejemplo:

val numeros = List(1, 2, 3, 4)
// map es una higher-order function que toma una funci√≥n (x => x * 2) como argumento.
val doblados = numeros.map(x => x * 2)  // Resultado List(2, 4, 6, 8)

map es una orden superior porque recibe una funci√≥n an√≥nima (x => x * 2) y la aplica a cada elemento.

¬øPor qu√© son importantes en Big Data?

En Big Data, donde se manejan datasets masivos (millones o billones de registros), las higher-order functions son clave por estas razones:

    ¬øPor qu√© son importantes en Big Data?

En Big Data, donde se manejan datasets masivos (millones o billones de registros), las higher-order functions son clave por estas razones:

1 Procesamiento distribuido

    üü† Frameworks como Apache Spark (muy usado en Big Data) dependen de funciones como map, filter, reduce, que son higher-order. Estas se ejecutan en paralelo across nodos de un cl√∫ster. Por ejemplo:

    val datos = sparkContext.textFile("bigdata.txt")
    val conteo = datos.map(line => line.split(" ").length).reduce(_ + _)

    map transforma cada l√≠nea en un conteo de palabras, y reduce suma todo, distribuyendo el trabajo.
